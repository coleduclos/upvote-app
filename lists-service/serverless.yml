service: lists

plugins:
  - serverless-localstack

custom:
  localstack:
    debug: true
    stages:
      - local
    host: http://localhost
    networks:
      - host
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: local
  region: us-west-2

  environment:
    LISTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    LIST_ITEMS_TABLE: list-items-${opt:stage, self:provider.stage}
    VOTES_TABLE: votes-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
functions:
  listsCreateOne:
    handler: api/v1/lists.createOne
    memorySize: 128
    description: Create a list.
    events:
      - http:
          path: v1/lists
          method: post
  listsGetAll:
    handler: api/v1/lists.getAll
    memorySize: 128
    description: Get all lists.
    events:
      - http:
          path: v1/lists 
          method: get
  listsGetOne:
    handler: api/v1/lists.getOne
    memorySize: 128
    description: Get list details by id.
    events:
      - http:
          path: v1/lists/{listId}
          method: get
  listsDeleteOne:
    handler: api/v1/lists.deleteOne
    memorySize: 128
    description: Delete a list.
    events:
      - http:
          path: v1/lists/{listId}
          method: delete
  listItemsCreateOne:
    handler: api/v1/listItems.createOne
    memorySize: 128
    description: Create a list item.
    events:
      - http:
          path: v1/lists/{listId}/items
          method: post
  listItemsGetAll:
    handler: api/v1/listItems.getAll
    memorySize: 128
    description: Get all list items.
    events:
      - http:
          path: v1/lists/{listId}/items
          method: get
  listItemsGetOne:
    handler: api/v1/listItems.getOne
    memorySize: 128
    description: Get list item details by id.
    events:
      - http:
          path: v1/lists/{listId}/items/{itemId}
          method: get
  listItemsDeleteOne:
    handler: api/v1/listItems.deleteOne
    memorySize: 128
    description: Delete a list item.
    events:
      - http:
          path: v1/lists/{listId}/items/{itemId}
          method: delete
resources:
  Resources:
    ListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "listId"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "listId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.LISTS_TABLE}
    ListItemsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "listId"
            AttributeType: "S"
          -
            AttributeName: "itemId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "listId"
            KeyType: "HASH"
          -
            AttributeName: "itemId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.LIST_ITEMS_TABLE}
    VotesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userId"
            AttributeType: "S"
          -
            AttributeName: "listId_itemId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "userId"
            KeyType: "HASH"
          -
            AttributeName: "listId_itemId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOTES_TABLE}

