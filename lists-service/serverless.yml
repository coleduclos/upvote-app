service: upvote
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-2

  environment:
    LISTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-lists
    LIST_ITEMS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-list-items
    VOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-votes

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
custom:
  authorizor:
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer
    scopes:
      - email
      - openid
      - aws.cognito.signin.user.admin
functions:
  listsCreateOne:
    handler: api/v1/lists.createOne
    memorySize: 128
    description: Create a list.
    events:
      - http:
          path: v1/lists
          method: post
          authorizer: ${self:custom.authorizor}
  listsGetAll:
    handler: api/v1/lists.getAll
    memorySize: 128
    description: Get all lists.
    events:
      - http:
          path: v1/lists 
          method: get
          authorizer: ${self:custom.authorizor}
  listsGetOne:
    handler: api/v1/lists.getOne
    memorySize: 128
    description: Get list details by id.
    events:
      - http:
          path: v1/lists/{listId}
          method: get
          authorizer: ${self:custom.authorizor}
  listsDeleteOne:
    handler: api/v1/lists.deleteOne
    memorySize: 128
    description: Delete a list.
    events:
      - http:
          path: v1/lists/{listId}
          method: delete
          authorizer: ${self:custom.authorizor}
  listItemsCreateOne:
    handler: api/v1/listItems.createOne
    memorySize: 128
    description: Create a list item.
    events:
      - http:
          path: v1/lists/{listId}/items
          method: post
          authorizer: ${self:custom.authorizor}
  listItemsGetAllByListId:
    handler: api/v1/listItems.getAllByListId
    memorySize: 128
    description: Get all list items.
    events:
      - http:
          path: v1/lists/{listId}/items
          method: get
          authorizer: ${self:custom.authorizor}
  listItemsGetOne:
    handler: api/v1/listItems.getOne
    memorySize: 128
    description: Get list item details by id.
    events:
      - http:
          path: v1/lists/{listId}/items/{itemId}
          method: get
          authorizer: ${self:custom.authorizor}
  listItemsDeleteOne:
    handler: api/v1/listItems.deleteOne
    memorySize: 128
    description: Delete a list item.
    events:
      - http:
          path: v1/lists/{listId}/items/{itemId}
          method: delete
          authorizer: ${self:custom.authorizor}
  votesCreateOne:
    handler: api/v1/votes.createOne
    memorySize: 128
    description: Submit a vote.
    events:
      - http:
          path: v1/votes
          method: post
          authorizer: ${self:custom.authorizor}
  votesDeleteOne:
    handler: api/v1/votes.deleteOne
    memorySize: 128
    description: Remove a vote.
    events:
      - http:
          path: v1/votes/{voteId}
          method: delete
          authorizer: ${self:custom.authorizor}
  votesGetAll:
    handler: api/v1/votes.getAll
    memorySize: 128
    description: Get all votes.
    events:
      - http:
          path: v1/votes
          method: get
          authorizer: ${self:custom.authorizor}
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:service}-${opt:stage, self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: True
        AllowedOAuthScopes:
          - email
          - openid
          - aws.cognito.signin.user.admin
        CallbackURLs:
          - http://localhost:3000
        ClientName: ${self:service}-${opt:stage, self:provider.stage}-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${opt:stage, self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:service}-${opt:stage, self:provider.stage}-cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    ListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "listId"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "listId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.LISTS_TABLE}
    ListItemsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "listId"
            AttributeType: "S"
          -
            AttributeName: "itemId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "listId"
            KeyType: "HASH"
          -
            AttributeName: "itemId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.LIST_ITEMS_TABLE}
    VotesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userId"
            AttributeType: "S"
          -
            AttributeName: "listId_itemId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "userId"
            KeyType: "HASH"
          -
            AttributeName: "listId_itemId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOTES_TABLE}
